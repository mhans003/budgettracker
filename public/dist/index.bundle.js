/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!***********************************!*
  !*** ./public/assets/js/index.js ***!
  \***********************************/
eval("var transactions = [];\nvar myChart; //Get all transactions from the database.\n\nfetch(\"/api/transaction\").then(function (response) {\n  return response.json();\n}).then(function (data) {\n  //Save the retrieved data on global transactions variable.\n  transactions = data;\n  populateTotal();\n  populateTable();\n  populateChart();\n});\n\nfunction populateTotal() {\n  //Reduce the transaction amounts to a single total.\n  var total = transactions.reduce(function (total, t) {\n    return total + parseInt(t.value);\n  }, 0); //Output the total for the user.\n\n  var totalEl = document.querySelector(\"#total\");\n  totalEl.textContent = total;\n}\n\nfunction populateTable() {\n  //Clear out the table.\n  var tbody = document.querySelector(\"#tbody\");\n  tbody.innerHTML = \"\"; //For each of the saved transactions (retrieved from database):\n\n  transactions.forEach(function (transaction) {\n    //Create and populate a table row.\n    var tr = document.createElement(\"tr\");\n    tr.innerHTML = \"\\n      <td>\".concat(transaction.name, \"</td>\\n      <td>\").concat(transaction.value, \"</td>\\n    \"); //Insert this row into the new table.\n\n    tbody.appendChild(tr);\n  });\n}\n\nfunction populateChart() {\n  //Reverse the transactions to be populated in the right order.\n  var reversed = transactions.slice().reverse();\n  var sum = 0; //Create date labels for the chart.\n\n  var labels = reversed.map(function (t) {\n    var date = new Date(t.date);\n    return \"\".concat(date.getMonth() + 1, \"/\").concat(date.getDate(), \"/\").concat(date.getFullYear());\n  }); //Create the incremental values for the chart.\n\n  var data = reversed.map(function (t) {\n    sum += parseInt(t.value);\n    return sum;\n  }); //If there is already a chart, get rid of it.\n\n  if (myChart) {\n    myChart.destroy();\n  } //Prepare to draw the chart to the page.\n\n\n  var ctx = document.getElementById(\"myChart\").getContext(\"2d\"); //Create the chart using the data and labels.\n\n  myChart = new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: labels,\n      datasets: [{\n        label: \"Total Over Time\",\n        fill: true,\n        backgroundColor: \"#6666ff\",\n        data: data\n      }]\n    }\n  });\n}\n\nfunction sendTransaction(isAdding) {\n  //isAdding is a boolean value passed in depending on if the user is adding or subtracting a transation.\n  //This will determine if a transaction is removed or added.\n  var nameEl = document.querySelector(\"#t-name\");\n  var amountEl = document.querySelector(\"#t-amount\");\n  var errorEl = document.querySelector(\".form .error\"); //Validate user input. Output an error if needed.\n\n  if (nameEl.value === \"\" || amountEl.value === \"\") {\n    errorEl.textContent = \"Missing Information\";\n    return;\n  } else {\n    errorEl.textContent = \"\";\n  } //Create the record by packaging the data up into a transaction object.\n\n\n  var transaction = {\n    name: nameEl.value,\n    value: amountEl.value,\n    date: new Date().toISOString()\n  }; //If subtracting funds, convert amount to negative number.\n\n  if (!isAdding) {\n    transaction.value *= -1;\n  } //Add this transaction to the beginning of current array of data.\n\n\n  transactions.unshift(transaction); //Re-run logic to populate UI with new record.\n\n  populateChart();\n  populateTable();\n  populateTotal(); //Send the data to server to be stored.\n\n  fetch(\"/api/transaction\", {\n    method: \"POST\",\n    body: JSON.stringify(transaction),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    //Output an error if needed.\n    if (data.errors) {\n      errorEl.textContent = \"Missing Information\";\n    } else {\n      //Clear the form.\n      nameEl.value = \"\";\n      amountEl.value = \"\";\n    }\n  })[\"catch\"](function (err) {\n    //If the fetch failed, save in IndexedDB.\n    saveRecord(transaction); //Clear the form.\n\n    nameEl.value = \"\";\n    amountEl.value = \"\";\n  });\n} //Save the transaction in IndexedDB if not connected.\n\n\nfunction saveRecord(transaction) {} //EVENT LISTENERS\n\n\ndocument.querySelector(\"#add-btn\").onclick = function () {\n  sendTransaction(true);\n};\n\ndocument.querySelector(\"#sub-btn\").onclick = function () {\n  sendTransaction(false);\n}; //INDEXEDDB \n//Ensure that IndexedDB is possible in the browser.\n\n\nfunction verifyIndexedDB() {\n  if (!window.indexedDB) {\n    console.log(\"Your browser doesn't support IndexedDB. There may be a problem saving/storing budget data.\");\n    alert(\"Your browser doesn't support IndexedDB. There may be a problem saving/storing budget data.\");\n    return false;\n  } else {\n    return true;\n  }\n} //This function interacts with IndexedDB to perform CRUD operations. 'Object' will be ommitted when getting from the DB.\n//The fourth argument 'object' will contain the properties of a new transaction when \"putting\" into the DB\n//The fourth argument 'object' will contain an ID when deleting. \n\n\nfunction useIndexedDB(databaseName, storeName, method, object) {\n  return new Promise(function (resolve, reject) {\n    //Open IndexedDB using the DB name passed in.\n    var request = window.indexedDB.open(databaseName, 1);\n    var db, tx, store;\n\n    request.onupgradeneeded = function (e) {\n      var db = request.result; //Create the name of the transactions store.\n\n      db.createObjectStore(storeName, {\n        keyPath: \"_id\"\n      });\n    };\n\n    request.onerror = function (e) {\n      //Log an error if needed.\n      console.log(\"There was an error\");\n      alert(\"Something went wrong with IndexedDB.\");\n    }; //If the request to open IndexedDB is successful:\n\n\n    request.onsuccess = function (e) {\n      //Identify the DB.\n      db = request.result; //Create a transaction with the desired store.\n\n      tx = db.transaction(storeName, \"readwrite\");\n      store = tx.objectStore(storeName);\n\n      db.onerror = function (e) {\n        console.log(\"error\");\n        alert(\"Something went wrong trying to access the correct store.\");\n      }; //If the method passed in is 'put', store the passed in object.\n\n\n      if (method === \"put\") {\n        store.put(object);\n      } else if (method === \"get\") {\n        //If the method is 'get', grab all the items stored in indexedDB.\n        var all = store.getAll();\n\n        all.onsuccess = function () {\n          //Resolve the promise.\n          resolve(all.result);\n        }; //If the method is 'delete', delete the transaction with the ID passed iin.\n\n      } else if (method === \"delete\") {\n        store[\"delete\"](object._id);\n      }\n\n      tx.oncomplete = function () {\n        //Close the DB once operation is finished.\n        db.close();\n      };\n    };\n  });\n}\n\n//# sourceURL=webpack://budget-app/./public/assets/js/index.js?");
/******/ })()
;